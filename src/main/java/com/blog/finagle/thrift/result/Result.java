/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.blog.finagle.thrift.result;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Result implements TBase<Result, Result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Result");

  private static final TField CODE_FIELD_DESC = new TField("code", TType.I32, (short)1);
  private static final TField FAIL_DESC_LIST_FIELD_DESC = new TField("failDescList", TType.LIST, (short)2);


  public int code;
  public List<FailDesc> failDescList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CODE((short)1, "code"),
    FAIL_DESC_LIST((short)2, "failDescList");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
  	return CODE;
        case 2: // FAIL_DESC_LIST
  	return FAIL_DESC_LIST;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __CODE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new FieldMetaData("code", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.FAIL_DESC_LIST, new FieldMetaData("failDescList", TFieldRequirementType.OPTIONAL,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, FailDesc.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
  }


  public Result() {
  }

  public Result(
    int code)
  {
    this();
    this.code = code;
    setCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Result(Result other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.code = other.code;
    if (other.isSetFailDescList()) {
      List<FailDesc> __this__failDescList = new ArrayList<FailDesc>();
      for (FailDesc other_element : other.failDescList) {
        __this__failDescList.add(new FailDesc(other_element));
      }
      this.failDescList = __this__failDescList;
    }
  }

  public Result deepCopy() {
    return new Result(this);
  }

  @Override
  public void clear() {
    setCodeIsSet(false);
    this.code = 0;
    this.failDescList = null;
  }

  public int getCode() {
    return this.code;
  }

  public Result setCode(int code) {
    this.code = code;
    setCodeIsSet(true);

    return this;
  }

  public void unsetCode() {
  __isset_bit_vector.clear(__CODE_ISSET_ID);
  }

  /** Returns true if field code is set (has been asigned a value) and false otherwise */
  public boolean isSetCode() {
    return __isset_bit_vector.get(__CODE_ISSET_ID);
  }

  public void setCodeIsSet(boolean value) {
    __isset_bit_vector.set(__CODE_ISSET_ID, value);
  }

  public int getFailDescListSize() {
    return (this.failDescList == null) ? 0 : this.failDescList.size();
  }

  public java.util.Iterator<FailDesc> getFailDescListIterator() {
    return (this.failDescList == null) ? null : this.failDescList.iterator();
  }

  public void addToFailDescList(FailDesc elem) {
    if (this.failDescList == null) {
      this.failDescList = new ArrayList<FailDesc>();
    }
    this.failDescList.add(elem);
  }

  public List<FailDesc> getFailDescList() {
    return this.failDescList;
  }

  public Result setFailDescList(List<FailDesc> failDescList) {
    this.failDescList = failDescList;
    
    return this;
  }

  public void unsetFailDescList() {
    this.failDescList = null;
  }

  /** Returns true if field failDescList is set (has been asigned a value) and false otherwise */
  public boolean isSetFailDescList() {
    return this.failDescList != null;
  }

  public void setFailDescListIsSet(boolean value) {
    if (!value) {
      this.failDescList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((Integer)value);
      }
      break;
    case FAIL_DESC_LIST:
      if (value == null) {
        unsetFailDescList();
      } else {
        setFailDescList((List<FailDesc>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return new Integer(getCode());
    case FAIL_DESC_LIST:
      return getFailDescList();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCode();
    case FAIL_DESC_LIST:
      return isSetFailDescList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Result)
      return this.equals((Result)that);
    return false;
  }

  public boolean equals(Result that) {
    if (that == null)
      return false;
    boolean this_present_code = true;
    boolean that_present_code = true;
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (this.code != that.code)
        return false;
    }
    boolean this_present_failDescList = true && this.isSetFailDescList();
    boolean that_present_failDescList = true && that.isSetFailDescList();
    if (this_present_failDescList || that_present_failDescList) {
      if (!(this_present_failDescList && that_present_failDescList))
        return false;
      if (!this.failDescList.equals(that.failDescList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_code = true;
    builder.append(present_code);
    if (present_code)
      builder.append(code);
    boolean present_failDescList = true && (isSetFailDescList());
    builder.append(present_failDescList);
    if (present_failDescList)
      builder.append(failDescList);
    return builder.toHashCode();
  }

  public int compareTo(Result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Result typedOther = (Result)other;

    lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = TBaseHelper.compareTo(this.code, typedOther.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailDescList()).compareTo(typedOther.isSetFailDescList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailDescList()) {
      lastComparison = TBaseHelper.compareTo(this.failDescList, typedOther.failDescList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // CODE
          if (field.type == TType.I32) {
            this.code = iprot.readI32();
            setCodeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FAIL_DESC_LIST
          if (field.type == TType.LIST) {
            {
            TList _list0 = iprot.readListBegin();
            this.failDescList = new ArrayList<FailDesc>(_list0.size);
            for (int _i1 = 0; _i1 < _list0.size; ++_i1)
            {
              FailDesc _elem2;
              _elem2 = new FailDesc();
              _elem2.read(iprot);
              this.failDescList.add(_elem2);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CODE_FIELD_DESC);
    oprot.writeI32(this.code);
    oprot.writeFieldEnd();
    if (this.failDescList != null) {
      if (isSetFailDescList()) {
        oprot.writeFieldBegin(FAIL_DESC_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.failDescList.size()));
          for (FailDesc _iter3 : this.failDescList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Result(");
    boolean first = true;
    sb.append("code:");
    sb.append(this.code);
    first = false;
    if (isSetFailDescList()) {
      if (!first) sb.append(", ");
      sb.append("failDescList:");
      if (this.failDescList == null) {
        sb.append("null");
      } else {
        sb.append(this.failDescList);
      }
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
